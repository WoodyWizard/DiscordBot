use std::env;
use rand::Rng;

use serenity::{
    async_trait,
    model::{channel::Message, gateway::Ready, guild::GuildStatus, id::{ChannelId, GuildId},},
    prelude::*,
    utils::{MessageBuilder, Colour},
};

struct Handler;

#[async_trait]
impl EventHandler for Handler {
    async fn message(&self, context: Context, msg: Message) {
      if msg.author.id.0 == 152858153719955457 {
            if msg.content == "!ping" {
                let channel = match msg.channel_id.to_channel(&context).await {
                    Ok(channel) => channel,
                    Err(why) => {
                        println!("Error getting channel: {:?}", why);

                        return;
                    },
                };

                // The message builder allows for creating a message by
                // mentioning users dynamically, pushing "safe" versions of
                // content (such as bolding normalized content), displaying
                // emojis, and more.
                let response = MessageBuilder::new()
                    .push("User ")
                    .push_bold_safe(&msg.author.name)
                    .push(" used the 'ping' command in the ")
                    .mention(&channel)
                    .push(" channel")
                    .build();

                if let Err(why) = msg.channel_id.say(&context.http, &response).await {
                    println!("Error sending message: {:?}", why);
                }
            }
            if msg.content == "!dnd" {
                context.dnd().await;
            }
            if msg.content == "!online" {
                context.online().await;
            }
            if msg.content == "!guildid" {
                if let Some(ggid) = msg.guild_id {
                    println!("{}", ggid.0);
                }                
            }
            if msg.content == "!roleids" {
                if let Some(ggid) = msg.guild_id {
                     println!("Role Id's Method Call");
                     let local_hashmap = ggid.roles(&context.http);
                     for i in local_hashmap.await.iter() {
                      // println!("{:?}", i);
                       for x in i.values() {
                            println!("{}", x);
                            println!("x name = {}", x.name);
                       }
                     }
                }                
            }

            if &msg.content[0..4] == "!rgb" {
               match msg.guild_id {
                    Some(x) => {
                        if x.0 == 759795278269251637 {
                            println!("759795278269251637 ready | role mentioned: {}", msg.mention_roles[0].0);
                            let mention_role = x.roles(&context.http).await.unwrap();
                            let role_for_rgb = mention_role.get(&msg.mention_roles[0]).unwrap();
                            let mut color1: u64 = 0;
                            let mut rgbcolor = Colour::from_rgb(0, 0 , 0);
                            let mut rgbcoloru64: u64 = 0;
                            println!("role_for_rgb = {:?}", role_for_rgb);
                            loop {
                                //println!("in loop");
                                if color1 > 16777215 {color1 = 0;}
                                color1 = color1 + 1;
                                if color1 % 100000 == 0 { 
                              
                                //println!("color1 : {}", color1);
                                  if let Err(why) = role_for_rgb.edit(&context.http,|mut r|{
                                   r.colour(color1/50);
                                 //   println!("Changing color");
                                   r
                                }).await
                                {
                                    println!("Error Edit Colour {}", why);
                                }
                              }
                            }
                            //match x.roles(&context.http) {
                            //    Some(rolel) => mention_role = rolel.get(msg.mention_roles[0].0),
                            //    None => println!("match role for !rgb error"),
                            //}
                            // role_for_rgb.colour = Colour::from_rgb(15, 150, 20);                        }
                        }
                        //&x.edit_role( &context.http,msg.mention_roles[0].0 , |r| { r.colour(6573123) } ).await.unwrap();
                    },
                    None => println!("This error, it is not from 759795278269251637"),
                } 
            }

            if msg.content == "!thisroleid" {
                let response = MessageBuilder::new()
                    .push("Roleid: ")
                    .push_bold_safe(&msg.mention_roles[0].0)
                    .build();
                if let Err(why) = msg.channel_id.say(&context.http, &response).await {
                    println!("Error sending message: {:?}", why);
                }
            }

     }
    // PUBLIC COMMANDS
    
            if msg.content == "!roll" {
               
                let randomgenerate: u8;
                {
                let mut rng = rand::thread_rng();
                randomgenerate = rng.gen_range(0..100); 
                }
                let response = MessageBuilder::new()
                    .push("User ")
                    .push_bold_safe(&msg.author.name)
                    .push(" Rolled the number:  ")
                    .push_bold_safe(randomgenerate)
                    .build();

                if let Err(why) = msg.channel_id.say(&context.http, &response).await {
                    println!("Error sending message: {:?}", why);
                }
            }
 

}

    async fn ready(&self, _: Context, ready: Ready) {
        println!("{} is connected! | id: {} | guild_id: {}", ready.user.name, ready.user.id.0, ready.guilds[0].id().0);
        match &ready.guilds[0] {
            GuildStatus::OnlineGuild(x) => println!(" name {}", x.name),
            GuildStatus::OnlinePartialGuild(x) => println!(" name {}", x.name),
            _ => println!("NotOnlineGuild"),
        }
    }
    
}
    


#[tokio::main]
async fn main() {
    // Configure the client with your Discord bot token in the environment.
    let token = "Mzk2NDI3NzYxMDc5ODEyMTA2.WkbAHw.qmGKpRaWN2-GPpJ_NSHrRnn_7F8";
    let mut client =
        Client::builder(&token).event_handler(Handler).await.expect("Err creating client");

    if let Err(why) = client.start().await {
        println!("Client error: {:?}", why);
        }
}
